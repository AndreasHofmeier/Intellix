/*
Deployment script for intellix

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "intellixv2"


GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


PRINT N'Creating [dbo].[DocIdTableType]...';


GO
CREATE TYPE [dbo].[DocIdTableType] AS TABLE (
    [Id] UNIQUEIDENTIFIER NOT NULL);


GO
PRINT N'Creating [dbo].[DataProtectionKeys]...';


GO
CREATE TABLE [dbo].[DataProtectionKeys] (
    [Id]           INT           NULL,
    [FriendlyName] VARCHAR (50)  NOT NULL,
    [Xml]          XML           NOT NULL,
    [CreatedAt]    DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_DataProtetionKeys] PRIMARY KEY CLUSTERED ([FriendlyName] ASC)
);


GO
PRINT N'Creating [dbo].[Dictionary]...';


GO
CREATE TABLE [dbo].[Dictionary] (
    [Id]                  INT            IDENTITY (1, 1) NOT NULL,
    [MsId]                INT            NOT NULL,
    [Original]            NVARCHAR (224) COLLATE Latin1_General_CS_AS NULL,
    [CorrectedInto]       NVARCHAR (224) COLLATE Latin1_General_CS_AS NULL,
    [NumberOfCorrections] INT            NULL,
    [CreatedAt]           DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_Dictionary] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Dictionary].[idx_dictionary]...';


GO
CREATE NONCLUSTERED INDEX [idx_dictionary]
    ON [dbo].[Dictionary]([MsId] ASC, [Original] ASC, [CorrectedInto] ASC)
    INCLUDE([NumberOfCorrections]);


GO
PRINT N'Creating [dbo].[DocumentInfoForUI]...';


GO
CREATE TABLE [dbo].[DocumentInfoForUI] (
    [DocId]        CHAR (64)      NOT NULL,
    [DocumentType] NVARCHAR (100) NULL,
    [Sender]       NVARCHAR (100) NULL,
    [DocDate]      DATETIME2 (7)  NULL,
    [State]        TINYINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([DocId] ASC)
);


GO
PRINT N'Creating [dbo].[DocumentsToDelete]...';


GO
CREATE TABLE [dbo].[DocumentsToDelete] (
    [Id]                CHAR (64)     NOT NULL,
    [StoragePath]       VARCHAR (100) NULL,
    [Feedback]          XML           NULL,
    [DocumentInfo]      XML           NULL,
    [FieldValueContext] XML           NULL,
    [Version]           SMALLINT      NULL,
    [CreatedBy]         INT           NOT NULL,
    [DeleteAt]          DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK__DocumentsToDelete] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DocumentsToDelete].[idx_docsToDelete]...';


GO
CREATE NONCLUSTERED INDEX [idx_docsToDelete]
    ON [dbo].[DocumentsToDelete]([DeleteAt] ASC)
    INCLUDE([Id]);


GO
PRINT N'Creating [dbo].[DocumentsWithoutFeedback]...';


GO
CREATE TABLE [dbo].[DocumentsWithoutFeedback] (
    [Id]           CHAR (64)     NOT NULL,
    [StoragePath]  VARCHAR (100) NULL,
    [DocumentInfo] XML           NULL,
    [Version]      SMALLINT      NULL,
    [CreatedBy]    INT           NOT NULL,
    CONSTRAINT [PK__DocumentsWithoutFeedback] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MappingEntity]...';


GO
CREATE TABLE [dbo].[MappingEntity] (
    [MsId]            INT            NOT NULL,
    [Id]              CHAR (8)       NOT NULL,
    [LastUse]         DATETIME       NOT NULL,
    [Mapping]         XML            NOT NULL,
    [DeleteAt]        DATETIME       NULL,
    [DocuWareVersion] NVARCHAR (256) NULL,
    [Rules]           XML            NULL,
    CONSTRAINT [PK_Mapping] PRIMARY KEY CLUSTERED ([MsId] ASC, [Id] ASC)
);


GO
PRINT N'Creating [dbo].[ModelspaceForgottenDocsData]...';


GO
CREATE TABLE [dbo].[ModelspaceForgottenDocsData] (
    [Id]                                INT                NOT NULL,
    [LastForgottenDocsJobAccess]        DATETIMEOFFSET (7) NOT NULL,
    [ForgottenDocsJobFinishedCorrectly] BIT                NOT NULL,
    [CreatedAt]                         DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_ModelspacesForgottenDocsData] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Modelspaces]...';


GO
CREATE TABLE [dbo].[Modelspaces] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (256) NOT NULL,
    [CreatedAt]      DATETIME2 (7)  NOT NULL,
    [CreatedBy]      INT            NOT NULL,
    [DoNoAging]      BIT            NOT NULL,
    [LastModified]   DATETIME2 (7)  NOT NULL,
    [DocTypeMapping] XML            NULL,
    [Configuration]  XML            NULL,
    [ToBeDeletedAt]  DATETIME2 (7)  NULL,
    CONSTRAINT [PK_Modelspaces] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Modelspaces].[unique_modelspace_name]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [unique_modelspace_name]
    ON [dbo].[Modelspaces]([Name] ASC)
    INCLUDE([CreatedBy], [Id]);


GO
PRINT N'Creating [dbo].[ModelspacesAgingData]...';


GO
CREATE TABLE [dbo].[ModelspacesAgingData] (
    [Id]                          INT                NOT NULL,
    [DoNoAging]                   BIT                NOT NULL,
    [LastTDandAgingAccess]        DATETIMEOFFSET (7) NOT NULL,
    [TDandAgingFinishedCorrectly] BIT                NOT NULL,
    [CreatedAt]                   DATETIMEOFFSET (7) NOT NULL,
    [CreatedBy]                   INT                NOT NULL,
    CONSTRAINT [PK_ModelspacesAgingData] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ObsoleteModelspacesData]...';


GO
CREATE TABLE [dbo].[ObsoleteModelspacesData] (
    [Id]                         INT                NOT NULL,
    [Obsolete]                   DATETIME2 (7)      NULL,
    [LastDeleteModelspaceAccess] DATETIMEOFFSET (7) NOT NULL,
    [DeleteMsFinishedCorrectly]  BIT                NOT NULL,
    [CreatedBy]                  INT                NOT NULL,
    CONSTRAINT [PK_ObsoleteModelspacesData] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Quota]...';


GO
CREATE TABLE [dbo].[Quota] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Credit]    INT           NULL,
    [Booked]    INT           NOT NULL,
    [CreatedAt] DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Quota] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (32)  NOT NULL,
    [CreatedAt]   DATETIME2 (7)  NOT NULL,
    [Permissions] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[ShortIdToLongIdMapping]...';


GO
CREATE TABLE [dbo].[ShortIdToLongIdMapping] (
    [ShortId] CHAR (56) NOT NULL,
    [LongId]  CHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([ShortId] ASC)
);


GO
PRINT N'Creating [dbo].[SimpleFieldFilters]...';


GO
CREATE TABLE [dbo].[SimpleFieldFilters] (
    [ModelspaceId] INT            NOT NULL,
    [FieldName]    VARCHAR (50)   NOT NULL,
    [FileName]     NVARCHAR (MAX) NULL,
    [Enabled]      BIT            NOT NULL,
    [CreatedAt]    DATETIME       NOT NULL,
    CONSTRAINT [PK_SimpleFieldFilters] PRIMARY KEY CLUSTERED ([ModelspaceId] ASC, [FieldName] ASC)
);


GO
PRINT N'Creating [dbo].[TrainingDocuments]...';


GO
CREATE TABLE [dbo].[TrainingDocuments] (
    [Id]                CHAR (64)     NOT NULL,
    [StoragePath]       VARCHAR (100) NULL,
    [Feedback]          XML           NULL,
    [DocumentInfo]      XML           NULL,
    [FieldValueContext] XML           NULL,
    [Version]           SMALLINT      NULL,
    [CreatedBy]         INT           NOT NULL,
    CONSTRAINT [PK__TrainingDocuments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserRoles]...';


GO
CREATE TABLE [dbo].[UserRoles] (
    [UserId]    INT           NOT NULL,
    [RoleId]    INT           NOT NULL,
    [CreatedAt] DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_UserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (100)  NOT NULL,
    [Password]      VARBINARY (256) NULL,
    [PasswordSalt]  NVARCHAR (256)  NULL,
    [HashAlgorithm] INT             NOT NULL,
    [CreatedAt]     DATETIME2 (7)   NOT NULL,
    [IsActive]      BIT             NOT NULL,
    [QuotaId]       INT             NULL,
    [CreatedBy]     INT             NULL,
    [UserType]      TINYINT         NOT NULL,
    [Company]       NVARCHAR (MAX)  NULL,
    [DisplayName]   NVARCHAR (MAX)  NULL,
    [Uri]           NVARCHAR (MAX)  NULL,
    [Tags]          NVARCHAR (MAX)  NOT NULL,
    [ToBeDeletedAt] DATETIME2 (7)   NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [Unique_Name_Users] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[Users].[idx_Users_CreatedBy]...';


GO
CREATE NONCLUSTERED INDEX [idx_Users_CreatedBy]
    ON [dbo].[Users]([CreatedBy] ASC);


GO
PRINT N'Creating unnamed constraint on [dbo].[DataProtectionKeys]...';


GO
ALTER TABLE [dbo].[DataProtectionKeys]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Dictionary]...';


GO
ALTER TABLE [dbo].[Dictionary]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[DocumentInfoForUI]...';


GO
ALTER TABLE [dbo].[DocumentInfoForUI]
    ADD DEFAULT 0 FOR [State];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspaceForgottenDocsData]...';


GO
ALTER TABLE [dbo].[ModelspaceForgottenDocsData]
    ADD DEFAULT 0 FOR [ForgottenDocsJobFinishedCorrectly];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspaceForgottenDocsData]...';


GO
ALTER TABLE [dbo].[ModelspaceForgottenDocsData]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspaceForgottenDocsData]...';


GO
ALTER TABLE [dbo].[ModelspaceForgottenDocsData]
    ADD DEFAULT '2000-01-01' FOR [LastForgottenDocsJobAccess];


GO
PRINT N'Creating unnamed constraint on [dbo].[Modelspaces]...';


GO
ALTER TABLE [dbo].[Modelspaces]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Modelspaces]...';


GO
ALTER TABLE [dbo].[Modelspaces]
    ADD DEFAULT 0 FOR [DoNoAging];


GO
PRINT N'Creating unnamed constraint on [dbo].[Modelspaces]...';


GO
ALTER TABLE [dbo].[Modelspaces]
    ADD DEFAULT SYSUTCDATETIME() FOR [LastModified];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspacesAgingData]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD DEFAULT 0 FOR [TDandAgingFinishedCorrectly];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspacesAgingData]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD DEFAULT '2000-01-01' FOR [LastTDandAgingAccess];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspacesAgingData]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspacesAgingData]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD DEFAULT 0 FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModelspacesAgingData]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD DEFAULT 0 FOR [DoNoAging];


GO
PRINT N'Creating unnamed constraint on [dbo].[ObsoleteModelspacesData]...';


GO
ALTER TABLE [dbo].[ObsoleteModelspacesData]
    ADD DEFAULT 0 FOR [DeleteMsFinishedCorrectly];


GO
PRINT N'Creating unnamed constraint on [dbo].[ObsoleteModelspacesData]...';


GO
ALTER TABLE [dbo].[ObsoleteModelspacesData]
    ADD DEFAULT '2000-01-01' FOR [LastDeleteModelspaceAccess];


GO
PRINT N'Creating unnamed constraint on [dbo].[ObsoleteModelspacesData]...';


GO
ALTER TABLE [dbo].[ObsoleteModelspacesData]
    ADD DEFAULT 0 FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[Quota]...';


GO
ALTER TABLE [dbo].[Quota]
    ADD DEFAULT 0 FOR [Booked];


GO
PRINT N'Creating unnamed constraint on [dbo].[Quota]...';


GO
ALTER TABLE [dbo].[Quota]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Roles]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[SimpleFieldFilters]...';


GO
ALTER TABLE [dbo].[SimpleFieldFilters]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[SimpleFieldFilters]...';


GO
ALTER TABLE [dbo].[SimpleFieldFilters]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRoles]...';


GO
ALTER TABLE [dbo].[UserRoles]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [UserType];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT '' FOR [Tags];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT SYSUTCDATETIME() FOR [CreatedAt];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [HashAlgorithm];


GO
PRINT N'Creating [dbo].[FK_Dictionary_Modelspace]...';


GO
ALTER TABLE [dbo].[Dictionary]
    ADD CONSTRAINT [FK_Dictionary_Modelspace] FOREIGN KEY ([MsId]) REFERENCES [dbo].[Modelspaces] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ModelspacesForgottenDocsData]...';


GO
ALTER TABLE [dbo].[ModelspaceForgottenDocsData]
    ADD CONSTRAINT [FK_ModelspacesForgottenDocsData] FOREIGN KEY ([Id]) REFERENCES [dbo].[Modelspaces] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Modelspaces_Users]...';


GO
ALTER TABLE [dbo].[Modelspaces]
    ADD CONSTRAINT [FK_Modelspaces_Users] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Modelspaces]...';


GO
ALTER TABLE [dbo].[ModelspacesAgingData]
    ADD CONSTRAINT [FK_Modelspaces] FOREIGN KEY ([Id]) REFERENCES [dbo].[Modelspaces] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ObsoleteModelspacesData]...';


GO
ALTER TABLE [dbo].[ObsoleteModelspacesData]
    ADD CONSTRAINT [FK_ObsoleteModelspacesData] FOREIGN KEY ([Id]) REFERENCES [dbo].[Modelspaces] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_SimpleFieldFilters_Modelspaces]...';


GO
ALTER TABLE [dbo].[SimpleFieldFilters]
    ADD CONSTRAINT [FK_SimpleFieldFilters_Modelspaces] FOREIGN KEY ([ModelspaceId]) REFERENCES [dbo].[Modelspaces] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UserRoles_Users]...';


GO
ALTER TABLE [dbo].[UserRoles]
    ADD CONSTRAINT [FK_UserRoles_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UserRoles_Roles]...';


GO
ALTER TABLE [dbo].[UserRoles]
    ADD CONSTRAINT [FK_UserRoles_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Users_Quota]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_Quota] FOREIGN KEY ([QuotaId]) REFERENCES [dbo].[Quota] ([Id]) ON DELETE SET NULL;


GO
PRINT N'Creating [dbo].[trig_ModelspacesUpdate]...';


GO
CREATE TRIGGER trig_ModelspacesUpdate
	ON Modelspaces
	FOR UPDATE
	AS
	BEGIN
		SET NOCOUNT ON

		update Modelspaces 
		set LastModified = SYSUTCDATETIME()
		from modelspaces m inner join inserted i on m.Id = i.id;


		update ModelspacesAgingData 
		set DoNoAging = i.DoNoAging
		from ModelspacesAgingData m inner join inserted i on m.Id = i.id;
	END
GO
PRINT N'Creating [dbo].[trig_ModelspacesInsert]...';


GO
CREATE TRIGGER trig_ModelspacesInsert
	ON Modelspaces
	FOR Insert
	AS
	BEGIN
		SET NOCOUNT ON

		insert into ModelspacesAgingData(id, DoNoAging, CreatedBy, CreatedAt) 
		select inserted.Id, inserted.DoNoAging, inserted.CreatedBy, inserted.CreatedAt
		from inserted;

		insert into ModelspaceForgottenDocsData(id, CreatedAt)
		select inserted.Id, inserted.CreatedAt
		from inserted;

		insert into ObsoleteModelspacesData(Id, CreatedBy)
		select inserted.Id, inserted.CreatedBy
		from inserted;
	END
GO
PRINT N'Creating [dbo].[QuotaPerUser]...';


GO
CREATE VIEW QuotaPerUser
	AS SELECT u.Id, u.Name, u.DisplayName, u.Company, u.Uri, u.UserType, u.Tags,(q.Credit - q.Booked) RemainingCredit, q.Credit,  isnull(q.Booked, 0) Booked, u.QuotaId
	FROM Users u left outer join Quota q on u.QuotaId = q.id
	--show only active users
GO
PRINT N'Creating [dbo].[FromMsId]...';


GO

CREATE FUNCTION [dbo].FromMsId
(
	@msId int
)
RETURNS char(8)
AS
BEGIN
	return CONVERT(VARCHAR(8),CONVERT(VARBINARY(4), @msid), 2) 
END
GO
PRINT N'Creating [dbo].[HumanReadableUserType]...';


GO
create function HumanReadableUserType(@userType int)
returns nvarchar(100)
as
begin
return 
	case 
		when @userType=0 then 'Not Specified'
		when @userType=1 then 'On-Premise'
		when @userType=2 then 'DWOnline'
		when @userType=3 then 'RSD'
		when @userType=4 then 'ADP'
		when @userType=5 then 'Employee'
		when @userType=6 then 'Inhouse'
		when @userType=7 then 'Test Account'
		when @userType=8 then 'Paper Organizer'
		
		when @userType=9 then 'On-Premise Trial'
		when @userType=10 then 'DWOnline Trial'
        else 'Unrecognized Type'
	end
end;
GO
PRINT N'Creating [dbo].[IdToCreatedAt]...';


GO

CREATE FUNCTION [dbo].[IdToCreatedAt]
(
	@b char(64)
)
RETURNS DATETIME2
AS
BEGIN
	declare @baseTime Datetime2;
	declare @ticks bigint;	
	declare @result DateTime2;
	Set @ticks = convert(bigint, convert(varbinary, '0x' + substring(@b, 17, 16), 1));	
	set @baseTime = '01-01-2010';	
	set @result = DateAdd(second, @ticks / 1000, @basetime);
	set @result = DateAdd(MILLISECOND, @ticks % 1000, @result);	
	return @result;	
END
GO
PRINT N'Creating [dbo].[ToIntellixTicks]...';


GO
CREATE FUNCTION [dbo].[ToIntellixTicks]
(	
	@timestamp datetime2
)
RETURNS bigint
AS begin
	declare @baseTime Datetime2;
	set @baseTime = '01-01-2010';
	return 1000 * CONVERT(bigint, datediff(SECOND, @baseTime, @timestamp))  + DATEPART(MILLISECOND, @timestamp)
end
GO
PRINT N'Creating [dbo].[ToMsId]...';


GO
CREATE FUNCTION [dbo].ToMsId
(
	@b char(64)
)
RETURNS INT
AS
BEGIN
	return convert(int, convert(varbinary, '0x' + substring(@b, 1, 8), 1))
END
GO
PRINT N'Creating [dbo].[ToIntellixId]...';


GO

CREATE FUNCTION ToIntellixId
(	
	@msId int,
	@mappingCode char(8),
	@timestamp datetime2,
	@id UNIQUEIDENTIFIER
	)
RETURNS char(64)
AS begin
	return formatmessage('%08x', @msid) + @mappingCode + formatmessage('%016I64x',dbo.ToIntellixTicks(@timestamp)) + lower(REPLACE(CAST(@id AS VARCHAR(36)),'-',''));
end
GO
PRINT N'Creating [dbo].[GetUiDocuments]...';


GO
create function dbo.GetUiDocuments(@msId int, @start int, @count int)
returns table 
as 
return SELECT 	[DocId] ,[DocumentType], [Sender] , [DocDate],[State]  from
	(select *, ROW_NUMBER() OVER (ORDER BY DocId desc) AS RowNumber from DocumentInfoForUI
	where dbo.FromMsId(@msid) <= DocId and DocId < dbo.FromMsId(@msid+1)) X
	where x.RowNumber >= @start and x.RowNumber < @start+@count
GO
PRINT N'Creating [dbo].[AddDictionaryEntry]...';


GO
CREATE PROCEDURE [dbo].AddDictionaryEntry
	@msId int, 
	@original nvarchar(256),
	@correctedInto nvarchar(256)

AS
	update Dictionary set numberOfCorrections = numberOfCorrections+1 Where MsId=@msId AND original=@original AND correctedInto = @correctedInto;
	if @@ROWCOUNT=0
	begin
		insert Into Dictionary (MsId, original, correctedInto, numberOfCorrections) values (@msId,@original,@correctedInto,1);
	end

	if (@original <> @correctedInto)
	begin
		update Dictionary set numberOfCorrections = numberOfCorrections-1 Where MsId=@msId AND original=@correctedInto AND correctedInto = @original;
	end
GO
PRINT N'Creating [dbo].[AddFeedbackToDocument]...';


GO
CREATE PROCEDURE [dbo].[AddFeedbackToDocument](
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@feedback xml,
	@fieldValueContext xml,
	@documentType NVARCHAR(100), 
    @sender NVARCHAR(100), 
    @docDate DATETIME2
	)

as
	SET NOCOUNT ON;		

BEGIN		
		BEGIN TRY
			
			BEGIN TRANSACTION;
			if exists (Select Id from DocumentsWithoutFeedback where Id = @id)
				begin
					delete from DocumentsWithoutFeedback where Id = @id;				
					insert into TrainingDocuments(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext);					
				end
			else if exists (Select Id from TrainingDocuments where Id = @id)
				begin
					update TrainingDocuments set Feedback = @Feedback, FieldValueContext = @fieldValueContext where Id = @id;					
				end						
			else if exists (Select Id from DocumentsToDelete where Id = @id)
				begin
					delete from DocumentsToDelete where Id = @id;				
					insert into TrainingDocuments(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext);					
				end
			update DocumentInfoForUI set DocumentType = @documentType, Sender = @sender, DocDate = @docDate, [State] = 1 where DocId = @id;
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[AddMappingRules]...';


GO
CREATE PROCEDURE [dbo].[AddMappingRules](
	@msId int,
	@mappingId char(8),
	@mappingRules xml	
	)

as
	SET NOCOUNT ON;		

BEGIN		
		BEGIN TRY
			
			BEGIN TRANSACTION;			
			update MappingEntity set Rules = @mappingRules where MsId = @msId and Id = @mappingId;
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[AddNewDocument]...';


GO
CREATE PROCEDURE [dbo].[AddNewDocument](
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@mappingId CHAR(8) = 0,
	@mapping XML,
	@docuwareVersion nvarchar(256),
	@msId int
	)

as
	SET NOCOUNT ON;
	
BEGIN		
	BEGIN TRANSACTION;
	insert into DocumentsWithoutFeedback(Id, StoragePath, DocumentInfo,	[Version], CreatedBy ) values (@id, @storagePath, @documentInfo, @version, @createdBy);
	insert into DocumentInfoForUI(DocId) values (@id);
	insert into ShortIdToLongIdMapping(ShortId, LongId) values (substring(@id,1,8)+substring(@id,17,48), @id);

	MERGE MappingEntity
		USING (VALUES (@msId, @mappingId)) AS src (MsId, Id) 
	ON MappingEntity.MsId = src.MsId and MappingEntity.Id = src.Id
	WHEN MATCHED THEN
		UPDATE SET LastUse = GETUTCDATE()
	WHEN NOT MATCHED THEN
		INSERT (MsId, Id, LastUse, Mapping, DocuWareVersion)
		VALUES (src.MsId, src.Id, GETUTCDATE(), @mapping, @docuwareVersion);

	COMMIT;
END
GO
PRINT N'Creating [dbo].[AddNewDocumentWithFeedback]...';


GO
CREATE PROCEDURE [dbo].[AddNewDocumentWithFeedback] (
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@feedback xml,
	@fieldValueContext xml,
	@documentType NVARCHAR(100), 
    @sender NVARCHAR(100), 
    @docDate DATETIME2,
	@mappingId CHAR(16) = 0,
	@mapping XML,
	@docuwareVersion nvarchar(256),
	@msId int
	)
	



as
	SET NOCOUNT ON;	

BEGIN		
		declare	@isContained INT;
		BEGIN TRY			
			BEGIN TRANSACTION;
			insert into TrainingDocuments(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext);
			insert into DocumentInfoForUI(DocId, DocumentType, Sender, DocDate, State) values (@id, @documentType, @sender, @docDate, 1);
			insert into ShortIdToLongIdMapping(ShortId, LongId) values (substring(@id,1,8)+substring(@id,17,48), @id);
			SET @isContained = (SELECT COUNT(*) FROM MappingEntity WHERE MsId = @msId and Id = @mappingId);
			IF (@isContained > 0)
			BEGIN
				UPDATE MappingEntity SET LastUse = GETUTCDATE() WHERE MsId = @msId and Id = @mappingId;
			END
			ELSE
			BEGIN
				INSERT INTO MappingEntity(MsId, Id, LastUse, Mapping, DocuWareVersion) VALUES (@msId, @mappingId, GETUTCDATE(), @mapping, @docuwareVersion);
			End
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[BookCoinFromQuota]...';


GO
CREATE PROCEDURE BookCoinFromQuota
	@quotaId int
AS
	SET NOCOUNT ON


	update Quota set 
		Booked = Booked+case when Credit is not null and Booked < Credit then 1 else 0 end
	output 
		case when deleted.Credit is null or deleted.Booked < deleted.Credit then 1 else 0 end BookingSuccessful 
	where Id = @quotaId
GO
PRINT N'Creating [dbo].[CreateRoleIfNotExists]...';


GO
CREATE PROCEDURE [dbo].CreateRoleIfNotExists
	@name nvarchar(256),
	@permissions nvarchar(max)
AS
declare @cnt int;


	SET NOCOUNT ON

	set @cnt = (select count(*) from Roles where Name=@name)
	if @cnt=0
	begin
		insert into Roles (name,Permissions) values (@name, @permissions)
	end
GO
PRINT N'Creating [dbo].[DeleteDictionaryOfModelspace]...';


GO
CREATE PROCEDURE [dbo].[DeleteDictionaryOfModelspace]
	@deleteAtMost int,
	@msId int

AS    
	delete Top(@deleteAtMost) from Dictionary where MsId = @msId;
	return @@rowCount;
GO
PRINT N'Creating [dbo].[DeleteDocumentToDeleteIrrevocably]...';


GO
CREATE PROCEDURE [dbo].[DeleteDocumentToDeleteIrrevocably]
	@id char(64)

as
SET NOCOUNT OFF;

Declare @affectedRows int = 0;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from DocumentInfoForUI where DocId = @id;
			set @affectedRows = @affectedRows + @@ROWCOUNT; 
			delete from DocumentsToDelete where Id = @id;						
			set @affectedRows = @affectedRows + @@ROWCOUNT;
			delete from ShortIdToLongIdMapping where ShortId = substring(@id,1,8)+substring(@id,17,48); 
			set @affectedRows = @affectedRows + @@ROWCOUNT;
			COMMIT;			
			return @affectedRows;
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
		
END
GO
PRINT N'Creating [dbo].[DeleteDocumentWithoutFeedbackIrrevocably]...';


GO
CREATE PROCEDURE [dbo].[DeleteDocumentWithoutFeedbackIrrevocably]
	@id char(64)

as
SET NOCOUNT OFF;

Declare @affectedRows int = 0;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from DocumentsWithoutFeedback where Id = @id;
			set @affectedRows = @affectedRows + @@ROWCOUNT; 			
			delete from DocumentInfoForUI where DocId = @id;
			set @affectedRows = @affectedRows + @@ROWCOUNT;
			delete from ShortIdToLongIdMapping where ShortId = substring(@id,1,8)+substring(@id,17,48); 
			set @affectedRows = @affectedRows + @@ROWCOUNT;						
			COMMIT;			
			return @affectedRows;
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
		
END
GO
PRINT N'Creating [dbo].[DeleteModelspaceObject]...';


GO
CREATE PROCEDURE [dbo].[DeleteModelspaceObject]
	@msId int
AS
SET NOCOUNT ON;

BEGIN
BEGIN TRY
	BEGIN TRANSACTION;		
	delete from Modelspaces where Id = @msId;
	delete from ModelspacesAgingData where Id = @msId;	
	delete from SimpleFieldFilters where ModelspaceId = @msId;
	delete from MappingEntity where MsId = @msId;
	COMMIT;	
END TRY
BEGIN CATCH
	ROLLBACK;
	THROW;
END CATCH	
END
GO
PRINT N'Creating [dbo].[DeleteTrainingDocumentIrrevocably]...';


GO
CREATE PROCEDURE [dbo].[DeleteTrainingDocumentIrrevocably]
	@id char(64)

as
SET NOCOUNT OFF;

Declare @affectedRows int = 0;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from TrainingDocuments where Id = @id;
			set @affectedRows = @affectedRows + @@ROWCOUNT; 
			delete from DocumentInfoForUI where DocId = @id;
			set @affectedRows = @affectedRows + @@ROWCOUNT;
			delete from ShortIdToLongIdMapping where ShortId = substring(@id,1,8)+substring(@id,17,48); 
			set @affectedRows = @affectedRows + @@ROWCOUNT; 
			COMMIT;			
			return @affectedRows;
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@userId int
AS
SET NOCOUNT ON;

BEGIN
Declare @quotaId int;
BEGIN TRY
	BEGIN TRANSACTION;	
	set @quotaId = (select top(1) QuotaId from Users where Id = @userId);
	delete from Users where Id = @userId;	
	delete from UserRoles where UserId = @userId;
	delete from Quota where Id = @quotaId;
	COMMIT;	
END TRY
BEGIN CATCH
	ROLLBACK;
	THROW;
END CATCH	
END
GO
PRINT N'Creating [dbo].[GetNextModelspaceForForgottenDocs]...';


GO
CREATE PROCEDURE [dbo].[GetNextModelspaceForForgottenDocs]
	@secondsSinceLastTouch int
AS
    SET NOCOUNT ON;

	DECLARE @timeStampAfter DateTime2
	Declare @msID int;	

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRAN;

	set @msID = (select top(1) Id from ModelspaceForgottenDocsData
	
	where 
	CreatedAt < DATEADD(MINUTE, -30, SYSUTCDATETIME())
	and
	(	
		(
		  ForgottenDocsJobFinishedCorrectly = 0 and LastForgottenDocsJobAccess < DATEADD(second, -2*@secondsSinceLastTouch, SYSUTCDATETIME())
		)
		or
		(
		  ForgottenDocsJobFinishedCorrectly = 1 and LastForgottenDocsJobAccess < DATEADD(hour, -12, SYSUTCDATETIME()) 
		)
	)
	order by ForgottenDocsJobFinishedCorrectly asc, LastForgottenDocsJobAccess);




	if @msId is not null 
	begin
		update ModelspaceForgottenDocsData set LastForgottenDocsJobAccess = SYSUTCDATETIME(),ForgottenDocsJobFinishedCorrectly=0 where Id = @msId				
	end
	commit;

	select @msId;
GO
PRINT N'Creating [dbo].[GetNextModelspaceForTDandAging]...';


GO
CREATE PROCEDURE [dbo].[GetNextModelspaceForTDandAging]
	@secondsSinceLastTouch int
AS
    SET NOCOUNT ON;

	DECLARE @timeStampAfter DateTime2
	Declare @msID int;	

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRAN;

	set @msId = (select top(1) Id from ModelspacesAgingData
	where 
	CreatedAt < DATEADD(MINUTE, -30, SYSUTCDATETIME())
	and
	(	
		(
		  TDandAgingFinishedCorrectly = 0 and LastTDandAgingAccess < DATEADD(second, -2*@secondsSinceLastTouch, SYSUTCDATETIME())
		)
		or
		(
		  TDandAgingFinishedCorrectly = 1 and LastTDandAgingAccess < DATEADD(hour, -12, SYSUTCDATETIME()) 
		)
	)
	order by TDandAgingFinishedCorrectly asc, LastTDandAgingAccess);




	if @msId is not null 
	begin
		update ModelspacesAgingData set LastTDandAgingAccess = SYSUTCDATETIME(),TDandAgingFinishedCorrectly=0 where Id = @msId		
	end
	commit;

	select @msId;
GO
PRINT N'Creating [dbo].[GetNextObsoleteModelspace]...';


GO
CREATE PROCEDURE [dbo].[GetNextObsoleteModelspace]
	@secondsSinceLastTouch int
AS
    SET NOCOUNT ON;

	DECLARE @timeStampAfter DateTime2
	Declare @msID int;	

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRAN;

	set @msId = (select top(1) Id from ObsoleteModelspacesData	
	where 
	Obsolete < SYSUTCDATETIME()
	and
	(	
		(
		  DeleteMsFinishedCorrectly = 0 and LastDeleteModelspaceAccess < DATEADD(second, -2*@secondsSinceLastTouch, SYSUTCDATETIME())
		)
		or
		(
		  DeleteMsFinishedCorrectly = 1 and LastDeleteModelspaceAccess < DATEADD(hour, -12, SYSUTCDATETIME()) 
		)
	)
	order by DeleteMsFinishedCorrectly asc, LastDeleteModelspaceAccess);




	if @msId is not null 
	begin
		update ObsoleteModelspacesData set LastDeleteModelspaceAccess = SYSUTCDATETIME(),DeleteMsFinishedCorrectly=0 where Id = @msId				
	end
	commit;

	select @msId;
GO
PRINT N'Creating [dbo].[GetUserByName]...';


GO
CREATE PROCEDURE [dbo].[GetUserByName]
	@userName nvarchar(200)
AS
	SET NOCOUNT ON;
	select * from Users where Name=@userName;
GO
PRINT N'Creating [dbo].[MarkDocumentAsObsoleteImmediately]...';


GO
CREATE PROCEDURE [dbo].[MarkDocumentAsObsoleteImmediately] (
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@feedback xml,
	@fieldValueContext xml
	)

as
SET NOCOUNT ON;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from DocumentsWithoutFeedback where Id = @id;
			delete from TrainingDocuments where Id = @id;
			insert into DocumentsToDelete(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext, DeleteAt ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext, GETDATE());
			delete from DocumentInfoForUI where DocId = @id;
			delete from ShortIdToLongIdMapping where ShortId = substring(@id,1,8)+substring(@id,17,48);			
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[MarkForgottenDocumentAsObsolete]...';


GO
CREATE PROCEDURE [dbo].[MarkForgottenDocumentAsObsolete] (
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int	
	)

as
SET NOCOUNT ON;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from DocumentsWithoutFeedback where Id = @id;
			delete from TrainingDocuments where Id = @id;
			insert into DocumentsToDelete(Id, StoragePath, DocumentInfo, [Version], CreatedBy, DeleteAt ) values (@id, @storagePath, @documentInfo, @version, @createdBy, DATEADD(MONTH,3,GETDATE()));
			update DocumentInfoForUI set [State] = 2 where DocId = @id;
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[MarkModelspaceAsObsolete]...';


GO
CREATE PROCEDURE [dbo].[MarkModelspaceAsObsolete]
(
	@msId int,
	@whenObsolete datetime2(7)	
)

as
SET NOCOUNT ON;
	declare			
		@obsoleteAt DateTime2(7)	

BEGIN
BEGIN TRY

	set @obsoleteAt = (select TOP(1) ToBeDeletedAt from Modelspaces where Id=@msId);
	if (@obsoleteAt is null)
	BEGIN		
		BEGIN TRANSACTION;		
		update Modelspaces set [ToBeDeletedAt] = @whenObsolete, Name = (Name + '-OBSOLETE-' + Convert(nvarchar(50),newid())), DoNoAging = 1 where id = @msId;
		update ModelspacesAgingData set DoNoAging = 1 where Id = @msId;
		update ObsoleteModelspacesData set Obsolete = @whenObsolete where Id = @msId;
		COMMIT;	
	END
	else
	BEGIN
		BEGIN TRANSACTION;		
		update Modelspaces set [ToBeDeletedAt] = @whenObsolete, DoNoAging = 1 where id = @msId;
		update ModelspacesAgingData set DoNoAging = 1 where Id = @msId;
		update ObsoleteModelspacesData set Obsolete = @whenObsolete where Id = @msId;
		COMMIT;	
	END
END TRY
BEGIN CATCH
	ROLLBACK;
	THROW;
END CATCH	
END
GO
PRINT N'Creating [dbo].[MarkTrainingDocumentAsObsolete]...';


GO
CREATE PROCEDURE [dbo].[MarkTrainingDocumentAsObsolete](
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@feedback xml,
	@fieldValueContext xml
	)

as
SET NOCOUNT ON;

BEGIN		
		BEGIN TRY
			BEGIN TRANSACTION;
			delete from TrainingDocuments where Id = @id;
			insert into DocumentsToDelete(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext, DeleteAt ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext, DATEADD(MONTH,3,GETDATE()));
			update DocumentInfoForUI set [State] = 2 where DocId = @id;
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[MarkUserAsObsolete]...';


GO
CREATE PROCEDURE [dbo].[MarkUserAsObsolete]
	@userId int,
	@whenObsolete datetime2(7)	

as
	SET NOCOUNT ON;	

	declare	
		@result int,
		@salt nvarchar(256)= CONVERT(nvarchar(256), NEWID()),		
		@password nvarchar(256) = Convert(nvarchar(256),newid())
					
BEGIN										
		declare @saltedPassword nvarchar(512) = @password + @salt;		
		declare @hash varbinary(256) = HashBytes('SHA1', @saltedPassword);
			
		BEGIN TRY	
			
			
				
			BEGIN TRANSACTION;					
			update Users set ToBeDeletedAt = @whenObsolete, [Password] = @hash, PasswordSalt = @salt, IsActive=0 where Id = @userId;			
			update Modelspaces set [ToBeDeletedAt] = @whenObsolete, Name = (Substring(Name,0,54) + '-OBSOLETE-' + Convert(nvarchar(36),newid())), DONoAging=1  where CreatedBy = @userId and ToBeDeletedAt is null;			
			update Modelspaces set [ToBeDeletedAt] = @whenObsolete, DoNoAging=1  where CreatedBy = @userId and ToBeDeletedAt is not null;			
			update MOdelspacesAgingData set DoNoAging = 1 where CreatedBy = @userId;		
			update ObsoleteModelspacesData set Obsolete = @whenObsolete where CreatedBy = @userId;
			COMMIT;
		END TRY
		BEGIN CATCH			
			rollback;			
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[MoveAutomaticallyStoredDocToDelete]...';


GO
CREATE PROCEDURE [dbo].[MoveAutomaticallyStoredDocToDelete] (
	@id char(64),
	@storagePath varchar(100),
	@documentInfo xml,
	@version smallint,
	@createdBy int,
	@feedback xml,
	@fieldValueContext xml,
	@documentType NVARCHAR(100), 
    @sender NVARCHAR(100), 
    @docDate DATETIME2
	)

as
	SET NOCOUNT ON;		

BEGIN		
		BEGIN TRY
			
			BEGIN TRANSACTION;
			if exists (Select Id from DocumentsWithoutFeedback where Id = @id)
				begin
					delete from DocumentsWithoutFeedback where Id = @id;				
					insert into DocumentsToDelete(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext, DeleteAt ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext, DATEADD(MONTH,3,GETDATE()));					
				end
			else if exists (Select Id from TrainingDocuments where Id = @id)
				begin
					delete from TrainingDocuments where Id = @id;
					insert into DocumentsToDelete(Id, StoragePath, DocumentInfo, [Version], CreatedBy, Feedback, FieldValueContext, DeleteAt ) values (@id, @storagePath, @documentInfo, @version, @createdBy, @feedback, @fieldValueContext, DATEADD(MONTH,3,GETDATE()));										
				end						
			else if exists (Select Id from DocumentsToDelete where Id = @id)
				begin
					update DocumentsToDelete set Feedback = @Feedback, FieldValueContext = @fieldValueContext, DeleteAt = DATEADD(MONTH,3,GETDATE()) where Id = @id;					
				end
			update DocumentInfoForUI set DocumentType = @documentType, Sender = @sender, DocDate = @docDate, [State] = 1 where DocId = @id;
			COMMIT;			
		END TRY
		BEGIN CATCH
			ROLLBACK;
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[ReactivateModelspace]...';


GO
CREATE PROCEDURE [dbo].[ReactivateModelspace]
(
	@msId int		
)

as
SET NOCOUNT ON;

declare			
		@isActive bit,
		@name nvarchar(256),
		@restoreName int

BEGIN
BEGIN TRY
	BEGIN TRANSACTION;		
	set @isActive = (Select Top(1) IsActive from Users where Id = (Select Top(1) CreatedBy from Modelspaces where Id = @msId))
	if @isActive = 0	
	THROW 60001, N'Cannot reactivate modelspace, as its owner is not active. Reactivate the user first.', 1;
	
	else
	begin
	set @name = (select Top(1) Name from MOdelspaces where Id = @msId);
	set @restoreName = CharIndex('-OBSOLETE-', @name)-1;
	if (@restoreName > 0)
		set @name = LEFT(@name, @restoreName);

	update Modelspaces set [ToBeDeletedAt] = NULL, Name = @name, DoNoAging = 0 where id = @msId;
	update ModelspacesAgingData set DoNoAging = 0 where Id = @msId;
	update ObsoleteModelspacesData set Obsolete = NULL where Id = @msId;
	end
	
	COMMIT;	
END TRY
BEGIN CATCH
	ROLLBACK;
	THROW;
END CATCH	
END
GO
PRINT N'Creating [dbo].[ReactivateUser]...';


GO
--- At the moment, this procedure is not used in the Intellix code on purpose, but this may change in the future
--- The modelspcae(s) of the user have to be reactivated separately, using the stored procedure ReactivateModelspace

CREATE PROCEDURE [dbo].[ReactivateUser]
	@userId int,
	@password nvarchar(256)

as
	SET NOCOUNT ON;	

	declare			
		@salt nvarchar(256)= CONVERT(nvarchar(256), NEWID())
			
BEGIN										
		declare @saltedPassword nvarchar(512) = @password + @salt;		
		declare @hash varbinary(256) = HashBytes('SHA1', @saltedPassword);

		BEGIN TRY		
			BEGIN TRANSACTION;					
			update Users set ToBeDeletedAt = NULL, [Password] = @hash, PasswordSalt = @salt, IsActive=1 where Id = @userId;						
			COMMIT;
		END TRY
		BEGIN CATCH			
			rollback;			
			THROW;
		END CATCH	
END
GO
PRINT N'Creating [dbo].[RemoveCorrection]...';


GO
CREATE PROCEDURE [dbo].[RemoveCorrection]
	@msId int, 
	@original nvarchar(224),
	@correctedInto nvarchar(224)
AS

	SET NOCOUNT ON;
	DELETE FROM Dictionary
	WHERE (MsId=@msId AND Original=@original AND CorrectedInto = @correctedInto);
GO
PRINT N'Creating [dbo].[ResetModelspaceAndReplaceAsParent]...';


GO
CREATE PROCEDURE [dbo].[ResetModelspaceAndReplaceAsParent]
	(
	@msId int,	
	@whenObsolete datetime2(7)	
	)

as
SET NOCOUNT ON;
	declare		
		@newModelspaceId int = -5,	
		@obsoleteAt DateTime2(7);
	declare
		@tempTable table(MsId int);		

BEGIN
BEGIN TRY
	set @obsoleteAt = (select TOP(1) ToBeDeletedAt from Modelspaces where Id=@msId);
	if (@obsoleteAt is null)
	BEGIN		
		BEGIN TRANSACTION;				
		update Modelspaces set [ToBeDeletedAt] = @whenObsolete, Name = (Name + '-OBSOLETE-' + Convert(nvarchar(50),newid())), DoNoAging = 1 where id = @msId;
		update ModelspacesAgingData set DoNoAging = 1 where Id = @msId;
		update ObsoleteModelspacesData set Obsolete = @whenObsolete where Id = @msId;
		insert into Modelspaces (Name, CreatedBy, DocTypeMapping, [Configuration]) OUTPUT INSERTED.Id INTO @tempTable select LEFT(Name,CharIndex('-OBSOLETE-', Name)-1), CreatedBy, DocTypeMapping, [Configuration] from Modelspaces where Id=@msId;				
		set @newModelspaceId = (Select Top(1) MsId from @tempTable);
		COMMIT;	
	END
	else
		throw 60001, 'This modelspace is already obsolete and thus cannot be reset again', 1;			
END TRY
BEGIN CATCH
	ROLLBACK;
	THROW;
END CATCH	
END
GO
PRINT N'Creating [dbo].[SaltAndHash]...';


GO
CREATE PROCEDURE [dbo].[SaltAndHash]
	@password nvarchar(256),
	@salt nvarchar(256) out,
	@hash varbinary(256) out
AS
	set @salt = CONVERT(nvarchar(256), NEWID());
	declare @saltedPassword nvarchar(512) = @password + @salt;
	set @hash = HashBytes('SHA1', @saltedPassword)
GO
PRINT N'Creating [dbo].[SetLastDeleteObsoleteMsAccess]...';


GO
CREATE PROCEDURE [dbo].[SetLastDeleteObsoleteMsAccess]
	@msId int, @finished bit
	
AS
	SET NOCOUNT ON
	Update ObsoleteModelspacesData set LastDeleteModelspaceAccess = SYSUTCDATETIME(), DeleteMsFinishedCorrectly=@finished where id=@msId
GO
PRINT N'Creating [dbo].[SetLastForgottenDocsJobAccess]...';


GO
CREATE PROCEDURE [dbo].[SetLastForgottenDocsJobAccess]
	@msId int, @finished bit
	
AS
	SET NOCOUNT ON

	Update ModelspaceForgottenDocsData set LastForgottenDocsJobAccess = SYSUTCDATETIME(), ForgottenDocsJobFinishedCorrectly=@finished where Id=@msId;
GO
PRINT N'Creating [dbo].[SetLastTDandAgingAccess]...';


GO
CREATE PROCEDURE [dbo].[SetLastTDandAgingAccess]
	@msId int, @finished bit
	
AS
	SET NOCOUNT ON

	Update ModelspacesAgingData set LastTDandAgingAccess = SYSUTCDATETIME(), TDandAgingFinishedCorrectly=@finished where id=@msId
GO
PRINT N'Creating [dbo].[SetQuota]...';


GO
CREATE PROCEDURE SetQuota
	@userId int,
	@quotaId int,
	@credit int,
	@booked int
AS
	SET NOCOUNT ON

	if(@quotaId is null)
	begin
		declare @ID table (id int)

		insert into Quota (Credit, Booked)
		output inserted.id into @ID 
		values (@credit, ISNULL(@booked,0))

		select @quotaId=id from @Id;
		update users set QuotaId = @quotaId where id=@userId
	end
	else begin
		if(@booked is null)
			update Quota set Credit = @credit where Id = @quotaId
		else
			update Quota set Credit = @credit, Booked = @booked where Id = @quotaId
	end
GO
PRINT N'Creating [dbo].[SetQuotaForUser]...';


GO
CREATE PROCEDURE SetQuotaForUser
	@userId int,
	@credit int,
	@booked int
AS
	declare @quotaId int

	select @userId = Id, @quotaId = QuotaId from Users where Id=@userId
	if(@userId is null)
		THROW 50000, N'The requested user cannot be found.', 1

	exec SetQuota @userId, @quotaId, @credit, @booked
GO
PRINT N'Creating [dbo].[SetQuotaForUserName]...';


GO
CREATE PROCEDURE SetQuotaForUserName
	@userName nvarchar(256),
	@credit int,
	@booked int
AS
	declare @userId int
	declare @quotaId int

	select @userId = Id, @quotaId = QuotaId from Users where name=@userName
	if(@userId is null)
		THROW 50000, N'The requested user cannot be found.', 1

	exec SetQuota @userId, @quotaId, @credit, @booked
GO
PRINT N'Creating [dbo].[SetRolePermissions]...';


GO
CREATE PROCEDURE [dbo].[SetRolePermissions]
	@name nvarchar(256),
	@permissions nvarchar(max)
AS
	update Roles set Permissions = @permissions where Name=@name
	if @@ROWCOUNT=0
	begin
		insert into Roles (name,Permissions) values (@name, @permissions)
	end
GO
PRINT N'Creating [dbo].[AddUser]...';


GO
CREATE PROCEDURE [dbo].[AddUser]
	@userName nvarchar(200), 
	@password nvarchar(256)
AS

	SET NOCOUNT ON;
	
	declare	@foo Int,
		@salt nvarchar(256),
		@hash varbinary(256)

	exec @foo = [dbo].[SaltAndHash]
		@password = @password,
		@salt = @salt OUTPUT,
		@hash = @hash OUTPUT

	insert into Users(Name, Password, PasswordSalt) values(@userName, @hash, @salt);
	select * from Users where Name=@userName;
GO
PRINT N'Creating [dbo].[ModifyUserPassword]...';


GO
CREATE PROCEDURE [dbo].[ModifyUserPassword]
	@userName nvarchar(200), 
	@password nvarchar(256)
AS

    declare	@foo Int,
		@salt nvarchar(256),
		@hash varbinary(256)

	exec @foo = [dbo].[SaltAndHash]
		@password = @password,
		@salt = @salt OUTPUT,
		@hash = @hash OUTPUT


	update Users set Password = @hash, PasswordSalt = @salt where Name=@userName;
	return @@ROWCOUNT
GO
PRINT N'Creating [dbo].[ModifyUserPasswordById]...';


GO
CREATE PROCEDURE [dbo].[ModifyUserPasswordById]
	@userId int, 
	@password nvarchar(256)
AS
	
	declare	@foo Int,
		@salt nvarchar(256),
		@hash varbinary(256)

	exec @foo = [dbo].[SaltAndHash]
		@password = @password,
		@salt = @salt OUTPUT,
		@hash = @hash OUTPUT

	update Users set Password = @hash, PasswordSalt = @salt where Id=@userId;
	return @@ROWCOUNT
GO
PRINT N'Creating [dbo].[AddOrUpdateAdminUser]...';


GO
CREATE PROCEDURE [dbo].AddOrUpdateAdminUser
	@userName nvarchar(200), 
	@password nvarchar(256)
AS

IF NOT EXISTS(select * from users where Name=@userName)
BEGIN
    Execute AddUser @userName, @password

    declare @adminUserRoleId int
    
    set @adminUserRoleId = (select Id from Roles where name = N'Administrator');
    
    insert into UserRoles (UserId, RoleId)
    select u.Id, @adminUserRoleId
    from
        (select * from Users where name = @userName) u left outer join
        (select * from UserRoles where RoleId = @adminUserRoleId) ur on u.Id = ur.UserId
    where ur.UserId is null
END
GO
Exec CreateRoleIfNotExists N'User', N'CreateModelspace ExtractDocument ImportModelspace ResetModelspace UploadDocument'
Exec CreateRoleIfNotExists N'Administrator', N'All'
Exec CreateRoleIfNotExists N'DWOnline', N'ChangeQuota CreateUser DeleteUser ListUsers EditUserRoles'
Exec CreateRoleIfNotExists N'SystemInspector', N'ViewLog StartQualityWorker ViewDocumentContent'
Exec CreateRoleIfNotExists N'SystemMaintainer', N'ChangeQuota CreateUser DeleteUser ViewLog'
Exec CreateRoleIfNotExists N'PowerUser', N'ExportModelspace ListModelspaceDocuments ResetModelspace ViewDocumentContent'
Exec CreateRoleIfNotExists N'StatisticsViewer', N'ViewLog'
Exec CreateRoleIfNotExists N'QuotaChanger', N'ChangeQuota ListUsers'
Exec CreateRoleIfNotExists N'Support', N'ChangeQuota ExtractDocument ListModelspaceDocuments ListUsers ResetModelspace SeeAllModelspaces UploadDocument ViewDocumentContent'


IF NOT EXISTS(select * from users where Name=N'anonymous')
BEGIN
	Execute AddUser N'anonymous', null;
END


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
